-----------------------------------------------------------------------------------------------------------------------
                                       Binary Search Algorithm - Documentation
-----------------------------------------------------------------------------------------------------------------------
Description:
----------------
Binary search is an efficient algorithm for finding a target element in a sorted array. It works by repeatedly
dividing the search space in half, eliminating the half where the target cannot be, until the target is found
or the search space is empty.

Algorithm:
----------------
1. Set 'left' to the index of the first element in the array (0) and 'right' to the index of the last element (length(arr) - 1).
2. While 'left' is less than or equal to 'right', do the following:
   a. Calculate the midpoint as 'mid' = (left + right) / 2.
   b. If the element at 'mid' is equal to the target, return arr[mid] found at 'mid' (target found).
   c. If the element at 'mid' is less than the target, set 'left' to 'mid + 1'.
   d. If the element at 'mid' is greater than the target, set 'right' to 'mid - 1'.
3. If the loop completes without finding the target, return -1 (target not found).

Pseudocode:
----------------
function binary_search(arr, target):
    left = 0
    right = length(arr) - 1

    while left <= right:
        mid = (left + right) / 2

        if arr[mid] == target:
            return f"arr[mid] Found at mid"
        else if arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

Parameters:
----------------
- arr: A sorted array to search within.
- target: The element to search for within the array.

Returns:
----------------
- If the target is found, returns the index of the target element in the array.
- If the target is not found, returns -1.

Complexity:
----------------
- Time Complexity: O(log n) (where n is the number of elements in the array)
- Space Complexity: O(1)

Usage:
----------------
To use the binary_search function, provide a sorted array (arr) and the target element (target) you want to find.
The function will return the index of the target if it exists in the array, or -1 if not found.

Example:
----------------
arr = [1, 3, 5, 7, 9, 11]
target = 7
index = binary_search(arr, target)
# The 'index' variable will be 3, as 7 is found at index 3 in the array.
